
package com.tollmanagementsystem.view;

import java.awt.CardLayout;
import com.tollmanagementsystem.controller.datastructure.CustomQueue;
import com.tollmanagementsystem.model.TollModel;
import com.tollmanagementsystem.util.ValidationUtil;
import java.util.LinkedList;
import java.util.List;
import javax.swing.*;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;





/**
 *
 * @author samiryadav
 */
public class TollManagementSystem extends javax.swing.JFrame {
    private List<TollModel> tollList;
    private java.awt.CardLayout cardLayout;
    private JComboBox<String> comboBoxVehicleType; // JComboBox for selecting vehicle type
    private final ValidationUtil validationUtil;
    private final Color errorColor = new Color(255, 51, 0);
    private final Color yellowColor = new Color(239, 192, 32);
    
    
    

    /**
     * Creates new form TollManagementSystem
     */
    public TollManagementSystem() {
        setResizable(false);
        initComponents();
        initializeData();
        validationUtil = new ValidationUtil(); //Initializing v
        // Initialize the JComboBox with vehicle categories
        String[] vehicleCategeory = {
            "A - Motorcycle, Scooter",
            "B - Car, Jeep",
            "C - Tempo",
            "C1 - E-Rickshaw",
            "D - Power Tiller",
            "E - Tractor",
            "F - Minibus, MiniTruck",
            "G - Truck, Bus, Lorry",
            "H - Road Roller, Dozer",
            "H1 - Dozer",
            "H2 - Road Roller",
            "I - Crane, Fire Brigade, Loader",
            "I1 - Crane",
            "I2 - Fire Brigade",
            "I3 - Loader",
            "J1 - Excavator",
            "J2 - Backhoe Loader",
            "J3 - Grader",
            "J4 - Forklift",
            "J5 - Other",
            "K - Scooter, Moped"
        };
        comboBoxVehicleType = new JComboBox<>(vehicleCategeory); // Initialize JComboBox with vehicle types
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPages = new javax.swing.JPanel();
        pnlTitle = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtpPages = new javax.swing.JTabbedPane();
        jpHomePage = new javax.swing.JPanel();
        pnlContext = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taInformation = new javax.swing.JTextArea();
        lblHomeImage = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();
        pnlFooter = new javax.swing.JPanel();
        lblTitle3 = new javax.swing.JLabel();
        lblPhrase = new javax.swing.JLabel();
        jpDashboard = new javax.swing.JPanel();
        jspTableContents = new javax.swing.JScrollPane();
        jtInformation = new javax.swing.JTable();
        pnlTextFields = new javax.swing.JPanel();
        tfLicenseNumber = new javax.swing.JTextField();
        tfCitizenName = new javax.swing.JTextField();
        tfCitizenshipNumber = new javax.swing.JTextField();
        tfVehicleNumber = new javax.swing.JTextField();
        tfAddress = new javax.swing.JTextField();
        cbVehicleCategeory = new javax.swing.JComboBox<>();
        tfState = new javax.swing.JTextField();
        tfPlazaName = new javax.swing.JTextField();
        tfPlazaLocation = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        pnlLoadingPage = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblBackgroundImage = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblLoadingBar = new javax.swing.JLabel();
        pnlLoginPage = new javax.swing.JPanel();
        pnlLoginDetails = new javax.swing.JPanel();
        tfUserName = new javax.swing.JTextField();
        pfPassword = new javax.swing.JPasswordField();
        spUser = new javax.swing.JSeparator();
        spPassword = new javax.swing.JSeparator();
        lblLogin = new javax.swing.JLabel();
        btnSignIn = new javax.swing.JButton();
        lblForgetPassword = new javax.swing.JLabel();
        lblPasswordImage = new javax.swing.JLabel();
        lblUserImage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pnlImage = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();

        pnlPages.setMaximumSize(new java.awt.Dimension(900, 500));
        pnlPages.setPreferredSize(new java.awt.Dimension(1150, 620));

        pnlTitle.setBackground(new java.awt.Color(204, 204, 204));

        btnLogOut.setBackground(new java.awt.Color(54, 69, 79));
        btnLogOut.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        btnLogOut.setForeground(new java.awt.Color(255, 255, 255));
        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("                                            Toll Tax Management System");

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(btnLogOut))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jtpPages.setBackground(new java.awt.Color(204, 204, 204));

        jpHomePage.setBackground(new java.awt.Color(255, 255, 255));

        pnlContext.setBackground(new java.awt.Color(54, 69, 79));

        taInformation.setBackground(new java.awt.Color(54, 69, 79));
        taInformation.setColumns(20);
        taInformation.setForeground(new java.awt.Color(255, 255, 255));
        taInformation.setRows(5);
        taInformation.setText("PATHPAY brings together innovative technologies and advanced techniques\nto provide a seamless, centralized toll management system. Our integrated\nsolution not only optimizes toll operations but also prioritizes road safety, \nensuring an enhanced driving experience on expressways.\n\nToll collection serves as a vital means to fund road infrastructure,particularly\nfor highways. It helps recover the capital invested in building roads while \ncovering the costs associated with their repair and maintenance. Moreover, \ntoll systems play a crucial role in reducing the financial burden on local\ntaxpayers by directly charging road users for their use of the infrastructure.");
        jScrollPane1.setViewportView(taInformation);

        lblHomeImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/home 1.png"))); // NOI18N

        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Revolutionizing Toll Management for a Safer, Smoother Journey");

        javax.swing.GroupLayout pnlContextLayout = new javax.swing.GroupLayout(pnlContext);
        pnlContext.setLayout(pnlContextLayout);
        pnlContextLayout.setHorizontalGroup(
            pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContextLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContextLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(lblHomeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContextLayout.createSequentialGroup()
                        .addComponent(lblTitle1)
                        .addGap(390, 390, 390))))
        );
        pnlContextLayout.setVerticalGroup(
            pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContextLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHomeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlContextLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pnlFooter.setBackground(new java.awt.Color(245, 245, 220));

        lblTitle3.setBackground(new java.awt.Color(245, 245, 220));
        lblTitle3.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblTitle3.setForeground(new java.awt.Color(128, 0, 32));
        lblTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle3.setText("Our Cutting-Edge Toll Management System: Simplified for Maximum Efficiency");

        lblPhrase.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblPhrase.setForeground(new java.awt.Color(128, 0, 32));
        lblPhrase.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhrase.setText("INNOVATIVE TOLLING TECHNOLOGIES");

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblPhrase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitle3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPhrase)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpHomePageLayout = new javax.swing.GroupLayout(jpHomePage);
        jpHomePage.setLayout(jpHomePageLayout);
        jpHomePageLayout.setHorizontalGroup(
            jpHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpHomePageLayout.setVerticalGroup(
            jpHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHomePageLayout.createSequentialGroup()
                .addComponent(pnlContext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jtpPages.addTab("Home", jpHomePage);

        jtInformation.setBackground(new java.awt.Color(54, 69, 79));
        jtInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "D.L.No.", "First Name", "last Name", "Citizenship No.", "Vechicle Number", "Vechicle Category", "Address", "State", "Toll Plaza name", "Toll Plaza Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtInformation.getTableHeader().setReorderingAllowed(false);
        jspTableContents.setViewportView(jtInformation);
        if (jtInformation.getColumnModel().getColumnCount() > 0) {
            jtInformation.getColumnModel().getColumn(0).setResizable(false);
            jtInformation.getColumnModel().getColumn(1).setResizable(false);
            jtInformation.getColumnModel().getColumn(2).setResizable(false);
            jtInformation.getColumnModel().getColumn(3).setResizable(false);
            jtInformation.getColumnModel().getColumn(4).setResizable(false);
            jtInformation.getColumnModel().getColumn(5).setResizable(false);
            jtInformation.getColumnModel().getColumn(6).setResizable(false);
            jtInformation.getColumnModel().getColumn(7).setResizable(false);
            jtInformation.getColumnModel().getColumn(8).setResizable(false);
            jtInformation.getColumnModel().getColumn(9).setResizable(false);
        }

        pnlTextFields.setBackground(new java.awt.Color(153, 102, 0));

        tfLicenseNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "D.L.No.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfLicenseNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfLicenseNumberActionPerformed(evt);
            }
        });

        tfCitizenName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Citizen Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfCitizenName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCitizenNameActionPerformed(evt);
            }
        });

        tfCitizenshipNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Citizenship Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfCitizenshipNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCitizenshipNumberActionPerformed(evt);
            }
        });

        tfVehicleNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehicle Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfVehicleNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfVehicleNumberActionPerformed(evt);
            }
        });

        tfAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAddressActionPerformed(evt);
            }
        });

        cbVehicleCategeory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A - Motorcycle,Scooter", "B - Car,Jeep", "C - Tempo", "C1 - E-Rickshaw", "D - Power Tiller", "E - Tractor", "F - Minibus,MiniTruck", "G - Truck,Bus,Lorry", "H - Road Roller,Dozer", "H1 - Dozer", "H2 - Road Roller", "I - Crane,Fire Brigade,Loader", "I1 - Crane", "I2 - Fire Brigade", "I3 - Loader", "J1 - Excavator", "J2 - Backhoe Loader", "J3 - Grader", "J4 - Forklift", "J5 - Other", "K - Scooter,Moped" }));
        cbVehicleCategeory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehicle Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        cbVehicleCategeory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVehicleCategeoryActionPerformed(evt);
            }
        });

        tfState.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfStateActionPerformed(evt);
            }
        });

        tfPlazaName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Toll Plaza Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfPlazaName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPlazaNameActionPerformed(evt);
            }
        });

        tfPlazaLocation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Toll Plaza Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        tfPlazaLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPlazaLocationActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnAdd.setText("ADD DETAILS");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.setToolTipText("");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTextFieldsLayout = new javax.swing.GroupLayout(pnlTextFields);
        pnlTextFields.setLayout(pnlTextFieldsLayout);
        pnlTextFieldsLayout.setHorizontalGroup(
            pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTextFieldsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfPlazaName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addComponent(tfLicenseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                                .addComponent(tfCitizenName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfCitizenshipNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                                .addComponent(tfPlazaLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfState, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfVehicleNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cbVehicleCategeory, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        pnlTextFieldsLayout.setVerticalGroup(
            pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTextFieldsLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCitizenName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfLicenseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCitizenshipNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfVehicleNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfState, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPlazaName, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPlazaLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(cbVehicleCategeory, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jpDashboardLayout = new javax.swing.GroupLayout(jpDashboard);
        jpDashboard.setLayout(jpDashboardLayout);
        jpDashboardLayout.setHorizontalGroup(
            jpDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspTableContents)
            .addComponent(pnlTextFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpDashboardLayout.setVerticalGroup(
            jpDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDashboardLayout.createSequentialGroup()
                .addComponent(jspTableContents, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlTextFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jtpPages.addTab("Dashboard", jpDashboard);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/logo.png"))); // NOI18N

        javax.swing.GroupLayout pnlPagesLayout = new javax.swing.GroupLayout(pnlPages);
        pnlPages.setLayout(pnlPagesLayout);
        pnlPagesLayout.setHorizontalGroup(
            pnlPagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagesLayout.createSequentialGroup()
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jtpPages)
        );
        pnlPagesLayout.setVerticalGroup(
            pnlPagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagesLayout.createSequentialGroup()
                .addGroup(pnlPagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtpPages))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 500));
        setPreferredSize(new java.awt.Dimension(1150, 620));
        setSize(new java.awt.Dimension(900, 500));

        pnlLoadingPage.setBackground(new java.awt.Color(153, 153, 153));
        pnlLoadingPage.setMaximumSize(new java.awt.Dimension(900, 500));
        pnlLoadingPage.setMinimumSize(new java.awt.Dimension(900, 500));
        pnlLoadingPage.setPreferredSize(new java.awt.Dimension(1150, 620));
        pnlLoadingPage.setSize(new java.awt.Dimension(900, 500));

        lblBackgroundImage.setBackground(new java.awt.Color(255, 255, 255));
        lblBackgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/toll.png"))); // NOI18N
        lblBackgroundImage.setMaximumSize(new java.awt.Dimension(450, 250));
        lblBackgroundImage.setMinimumSize(new java.awt.Dimension(450, 250));
        lblBackgroundImage.setPreferredSize(new java.awt.Dimension(450, 250));
        lblBackgroundImage.setSize(new java.awt.Dimension(450, 250));

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Your journey, streamlined-tolls made easy and fast");

        lblLoadingBar.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblLoadingBar.setForeground(new java.awt.Color(255, 255, 255));
        lblLoadingBar.setText("Loading ....");

        javax.swing.GroupLayout pnlLoadingPageLayout = new javax.swing.GroupLayout(pnlLoadingPage);
        pnlLoadingPage.setLayout(pnlLoadingPageLayout);
        pnlLoadingPageLayout.setHorizontalGroup(
            pnlLoadingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlLoadingPageLayout.createSequentialGroup()
                .addGroup(pnlLoadingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoadingPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblLoadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoadingPageLayout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(lblBackgroundImage, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        pnlLoadingPageLayout.setVerticalGroup(
            pnlLoadingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoadingPageLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblBackgroundImage, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(lblLoadingBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlLoginPage.setPreferredSize(new java.awt.Dimension(1150, 620));

        pnlLoginDetails.setBackground(new java.awt.Color(54, 69, 79));
        pnlLoginDetails.setForeground(new java.awt.Color(255, 255, 255));

        tfUserName.setBackground(new java.awt.Color(54, 69, 79));
        tfUserName.setForeground(new java.awt.Color(255, 255, 255));
        tfUserName.setBorder(null);
        tfUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfUserNameActionPerformed(evt);
            }
        });

        pfPassword.setBackground(new java.awt.Color(54, 69, 79));
        pfPassword.setForeground(new java.awt.Color(255, 255, 255));
        pfPassword.setBorder(null);
        pfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pfPasswordActionPerformed(evt);
            }
        });

        spUser.setForeground(new java.awt.Color(255, 255, 255));

        spPassword.setForeground(new java.awt.Color(255, 255, 255));

        lblLogin.setBackground(new java.awt.Color(0, 0, 0));
        lblLogin.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblLogin.setForeground(new java.awt.Color(255, 255, 255));
        lblLogin.setText("LOGIN");

        btnSignIn.setBackground(new java.awt.Color(54, 69, 79));
        btnSignIn.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSignIn.setForeground(new java.awt.Color(255, 255, 255));
        btnSignIn.setText("Sign In");
        btnSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignInActionPerformed(evt);
            }
        });

        lblForgetPassword.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        lblForgetPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblForgetPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblForgetPassword.setText("Forgot Password?");

        lblPasswordImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/password.png"))); // NOI18N

        lblUserImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/user.png"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Enter your credentials to access account");

        javax.swing.GroupLayout pnlLoginDetailsLayout = new javax.swing.GroupLayout(pnlLoginDetails);
        pnlLoginDetails.setLayout(pnlLoginDetailsLayout);
        pnlLoginDetailsLayout.setHorizontalGroup(
            pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblForgetPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                                    .addGap(117, 117, 117)
                                    .addComponent(jLabel1))
                                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginDetailsLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                                        .addGap(87, 87, 87)
                                        .addComponent(lblPasswordImage, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginDetailsLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(spUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(spPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                                .addGap(187, 187, 187)
                                .addComponent(lblLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(btnSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        pnlLoginDetailsLayout.setVerticalGroup(
            pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(lblLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUserImage, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(tfUserName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spUser, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPasswordImage, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(pfPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblForgetPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlImage.setBackground(new java.awt.Color(153, 153, 153));

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/login.png"))); // NOI18N

        javax.swing.GroupLayout pnlImageLayout = new javax.swing.GroupLayout(pnlImage);
        pnlImage.setLayout(pnlImageLayout);
        pnlImageLayout.setHorizontalGroup(
            pnlImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlImageLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlImageLayout.setVerticalGroup(
            pnlImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImageLayout.createSequentialGroup()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlLoginPageLayout = new javax.swing.GroupLayout(pnlLoginPage);
        pnlLoginPage.setLayout(pnlLoginPageLayout);
        pnlLoginPageLayout.setHorizontalGroup(
            pnlLoginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginPageLayout.createSequentialGroup()
                .addComponent(pnlLoginDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlLoginPageLayout.setVerticalGroup(
            pnlLoginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginPageLayout.createSequentialGroup()
                .addComponent(pnlImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(pnlLoginDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlLoadingPage, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlLoginPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlLoadingPage, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlLoginPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * Initializes the toll list with sample toll entries.
     * This method creates a new LinkedList to store toll entries
     * and populates it with predefined sample data for testing purposes.
 
     */
    private void initializeData() {
        tollList = new LinkedList<>();

        // Registering sample Citizens
        registerToll(new TollModel(123456789, "Sanjay Sharma", 987654321, 123456, 
                            "Tribhuvan International Airport Toll Plaza", 
                            "Kathmandu, Nepal", 
                            "123 Thamel, Kathmandu, Nepal", 
                            "Gandaki"));
        registerToll(new TollModel(123456788, "Anita Gurung", 987654322, 654321, 
                            "Madhyapur Thimi Toll Plaza", 
                            "Bhaktapur, Nepal", 
                            "456 Bhadgaon, Bhaktapur, Nepal", 
                            "Bagmati"));
        registerToll(new TollModel(123456787, "Rajesh Koirala", 987654323, 789012, 
                            "Sundarijal Toll Plaza", 
                            "Kathmandu, Nepal", 
                            "789 Sundarijal, Kathmandu, Nepal", 
                            "Bagmati"));
    }
    
    /**
    * Registers a new toll entry by adding it to the toll list.
    *
    * @param toll the TollModel object representing the toll entry to be registered
    */
    private void registerToll(TollModel toll) {
        tollList.add(toll);
        
        // Get the table model from the JTable
        DefaultTableModel model = (DefaultTableModel) jtInformation.getModel(); // Assuming jtInformation is your JTable
    
        // Add a new row to the table with the toll data
        model.addRow(new Object[]{
            toll.getLicenseNumber(), 
            toll.getCustomerName(),   
            toll.getCitizenshipNumber(), 
            toll.getVehicleNumber(),   
            toll.getTollPlazaName(),   
            toll.getTollPlazaLocation(), 
            toll.getAddress(),         
            toll.getState()            
        });
    }
    
    private void tfUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfUserNameActionPerformed
        // Retrieve the username from the text field
        String username = tfUserName.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the username
        if (username.isEmpty()) {
          // Show an error message if the username is empty
            tfUserName.setText("Username cannot be empty.");
            tfUserName.setForeground(Color.RED); // Set the error message color
            tfUserName.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (username.length() < 3 || username.length() > 15) {
            // Check for length constraints
            tfUserName.setText("Username must be between 3 and 15 characters.");
            tfUserName.setForeground(Color.RED);
            tfUserName.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            tfUserName.setText(""); // Clear the error message
            tfUserName.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // highlight valid input
        }
    }//GEN-LAST:event_tfUserNameActionPerformed

    private void pfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pfPasswordActionPerformed
        // Retrieve the password from the password field
    String password = new String(pfPassword.getPassword()).trim(); // Trim to remove leading/trailing spaces

    // Validate the password
    if (password.isEmpty()) {
        pfPassword.setText("Password cannot be empty.");
        pfPassword.setForeground(Color.RED); // Set the error message color
        pfPassword.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the password field
    } else if (password.length() < 8) {
        // Check for length constraints
        pfPassword.setText("Password must be at least 8 characters.");
        pfPassword.setForeground(Color.RED);
        pfPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
    } else {
        // If valid, clear the error message and reset the border
        pfPassword.setText(""); // Clear the error message
        pfPassword.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
    }
    }//GEN-LAST:event_pfPasswordActionPerformed

    private void btnSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignInActionPerformed
        String username = tfUserName.getText().trim();
        String password = new String(pfPassword.getPassword());
        
        if(username.equals("admin") && password.equals("password")){
            //Hide the login page
            pnlLoginPage.setVisible(false);
            
            //Show the loading page
            pnlPages.setVisible(true);
        }else{
            //check which credential is incorrect
            if (!username.equals("admin") && !password.equals("password")){
                //Both username and password are incorrect
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid username and passsword","Login Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }else if(!username.equals("admin")){
                //Username is incorrect
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid username","Login Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }else if(!password.equals("password")){
                //Password is incorrect
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid passsword","Login Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            }
    }//GEN-LAST:event_btnSignInActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        //Hide the main page on clicking log out button
        pnlPages.setVisible(false);
        //Show the login page
        pnlLoginPage.setVisible(true);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void tfAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAddressActionPerformed
        // Retrieve the address from the text field
        String address = tfAddress.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the address
        if (address.isEmpty()) {
            tfAddress.setText("Address cannot be empty.");
            tfAddress.setForeground(Color.RED); // Set the error message color
            tfAddress.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (address.length() < 5) {
            // Check for minimum length
            tfAddress.setText("Address must be at least 5 characters long.");
            tfAddress.setForeground(Color.RED);
            tfAddress.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            tfAddress.setText(""); // Clear the error message
            tfAddress.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input    
        }
    }//GEN-LAST:event_tfAddressActionPerformed

    private void tfPlazaLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPlazaLocationActionPerformed
        // Retrieve the plaza location from the text field
        String plazaLocation = tfPlazaLocation.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the plaza location
        if (plazaLocation.isEmpty()) {
            tfPlazaLocation.setText("Plaza location cannot be empty.");
            tfPlazaLocation.setForeground(Color.RED); // Set the error message color
            tfPlazaLocation.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (plazaLocation.length() < 5) {
            // Check for minimum length
            tfPlazaLocation.setText("Plaza location must be at least 5 characters long.");
            tfPlazaLocation.setForeground(Color.RED);
            tfPlazaLocation.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid
            tfPlazaLocation.setText(""); // Clear the error message
            tfPlazaLocation.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input   
        }
    }//GEN-LAST:event_tfPlazaLocationActionPerformed

    private void tfLicenseNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfLicenseNumberActionPerformed
        // Retrieve the license number from the text field
        String licenseNumber = tfLicenseNumber.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the license number
        if (licenseNumber.isEmpty()) {
            tfLicenseNumber.setText("License number cannot be empty.");
            tfLicenseNumber.setForeground(Color.RED); // Set the error message color
            tfLicenseNumber.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (!licenseNumber.matches("\\d{7}")) { // Example: Check if it is a 7-digit number
            tfLicenseNumber.setText("License number must be a 7-digit number.");
            tfLicenseNumber.setForeground(Color.RED);
            tfLicenseNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid,
            tfLicenseNumber.setText(""); // Clear the error message
            tfLicenseNumber.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input  
        }
    }//GEN-LAST:event_tfLicenseNumberActionPerformed

    private void tfCitizenNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCitizenNameActionPerformed
        // Retrieve the citizen name from the text field
        String citizenName = tfCitizenName.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the citizen name
        if (citizenName.isEmpty()) {
            tfCitizenName.setText("Citizen name cannot be empty.");
            tfCitizenName.setForeground(Color.RED); // Set the error message color
            tfCitizenName.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (citizenName.length() < 3) {
            // Check for minimum length
            tfCitizenName.setText("Citizen name must be at least 3 characters long.");
            tfCitizenName.setForeground(Color.RED);
            tfCitizenName.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, 
            tfCitizenName.setText(""); // Clear the error message
            tfCitizenName.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_tfCitizenNameActionPerformed

    private void tfCitizenshipNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCitizenshipNumberActionPerformed
        // Retrieve the citizenship number from the text field
        String citizenshipNumber = tfCitizenshipNumber.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the citizenship number
        if (citizenshipNumber.isEmpty()) {
            tfCitizenshipNumber.setText("Citizenship number cannot be empty.");
            tfCitizenshipNumber.setForeground(Color.RED); // Set the error message color
            tfCitizenshipNumber.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (!citizenshipNumber.matches("\\d{10}")) { // Example: Check if it is a 10-digit number
            tfCitizenshipNumber.setText("Citizenship number must be a 10-digit number.");
            tfCitizenshipNumber.setForeground(Color.RED);
            tfCitizenshipNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            tfCitizenshipNumber.setText(""); // Clear the error message
            tfCitizenshipNumber.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_tfCitizenshipNumberActionPerformed

    private void tfVehicleNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfVehicleNumberActionPerformed
        // Retrieve the vehicle number from the text field
        String vehicleNumber = tfVehicleNumber.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the vehicle number
        if (vehicleNumber.isEmpty()) {
            tfVehicleNumber.setText("Vehicle number cannot be empty.");
            tfVehicleNumber.setForeground(Color.RED); // Set the error message color
            tfVehicleNumber.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (!vehicleNumber.matches("[A-Z]{2}\\d{2}[A-Z]{2}\\d{4}")) { // Example: Validate format (e.g., AB12CD3456)
            tfVehicleNumber.setText("Vehicle number must be in the format AB12CD3456.");
            tfVehicleNumber.setForeground(Color.RED);
            tfVehicleNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            tfVehicleNumber.setText(""); // Clear the error message
            tfVehicleNumber.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_tfVehicleNumberActionPerformed
    
    private void cbVehicleCategeoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVehicleCategeoryActionPerformed
        // Retrieve the selected vehicle category from the JComboBox
        String selectedVehicleType = (String) cbVehicleCategeory.getSelectedItem();

        // Check if a valid selection was made
        if (selectedVehicleType != null) {
            // update the JComboBox selection
            System.out.println("Selected Vehicle Type: " + selectedVehicleType);
            cbVehicleCategeory.setForeground(Color.BLACK); // Note: this only changes the combo box's foreground color
        } else {
            // Handle the case where no selection is made
            System.out.println("No vehicle type selected.");
            cbVehicleCategeory.setForeground(Color.RED); // Note: this only changes the combo box's foreground color
    }
    }//GEN-LAST:event_cbVehicleCategeoryActionPerformed

    private void tfStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfStateActionPerformed
        // Retrieve the state from the text field
        String state = tfState.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the state input
        if (state.isEmpty()) {
            tfState.setText("State cannot be empty.");
            tfState.setForeground(Color.RED); // Set the error message color
            tfState.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (state.length() < 2) {
            // Check for minimum length
            tfState.setText("State must be at least 2 characters long.");
            tfState.setForeground(Color.RED);
            tfState.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            tfState.setText(""); // Clear the error message
            tfState.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_tfStateActionPerformed

    private void tfPlazaNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPlazaNameActionPerformed
        // Retrieve the plaza name from the text field
        String plazaName = tfPlazaName.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the plaza name
        if (plazaName.isEmpty()) {
            tfPlazaName.setText("Plaza name cannot be empty.");
            tfPlazaName.setForeground(Color.RED); // Set the error message color
            tfPlazaName.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (plazaName.length() < 3) {
            // Check for minimum length
            tfPlazaName.setText("Plaza name must be at least 3 characters long.");
            tfPlazaName.setForeground(Color.RED);
            tfPlazaName.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            tfPlazaName.setText(""); // Clear the error message
            tfPlazaName.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_tfPlazaNameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        boolean isValid = true;
        
        // Validate License Number
        isValid &= validateField(
                tfLicenseNumber, "License Number", tfLicenseNumber, "Must be a valid integer.",
                errorColor, yellowColor, ValidationUtil.isValidLicenseNumber(tfLicenseNumber.getText())
        );
    
        // Validate Citizen Name
        isValid &= validateField(
                tfCitizenName, "Customer Name", tfCitizenName, "Must contain only alphabets.",
                errorColor, yellowColor, ValidationUtil.isValidName(tfCitizenName.getText())
        );
    
        // Validate Citizenship Number
        isValid &= validateField(
                tfCitizenshipNumber, "Citizenship Number", tfCitizenshipNumber, "Must be a valid integer.",
                errorColor, yellowColor, ValidationUtil.isValidCitizenId(tfCitizenshipNumber.getText())
        );
    
        // Validate Vehicle Number
        isValid &= validateField(
                tfVehicleNumber, "Vehicle Number", tfVehicleNumber, "Must be a valid vehicle number.",
                errorColor, yellowColor, ValidationUtil.isValidVehicleNumber(tfVehicleNumber.getText())
        );
    
        // Validate Toll Plaza Name
        isValid &= validateField(
                tfPlazaName, "Toll Plaza Name", tfPlazaName, "Must not be empty.",
                errorColor, yellowColor, !tfPlazaName.getText().trim().isEmpty()
        );
    
        // Validate Toll Plaza Location
        isValid &= validateField(
                tfPlazaLocation, "Toll Plaza Location", tfPlazaLocation, "Must not be empty.",
                errorColor, yellowColor, !tfPlazaLocation.getText().trim().isEmpty()
        );
    
        // Validate Address
        isValid &= validateField(
                tfAddress, "Address", tfAddress, "Must not be empty.",
                errorColor, yellowColor, !tfAddress.getText().trim().isEmpty()
        );

        // Validate State
        isValid &= validateField(
                tfState, "State", tfState, "Must not be empty.",
                errorColor, yellowColor, !tfState.getText().trim().isEmpty()
        );
    
        if (isValid) {
            // Create a TollModel instance
            TollModel newToll = new TollModel(
                    Integer.parseInt(tfLicenseNumber.getText().trim()),
                    tfCitizenName.getText().trim(),
                    Integer.parseInt(tfCitizenshipNumber.getText().trim()),
                    Integer.parseInt(tfVehicleNumber.getText().trim()),
                    tfPlazaName.getText().trim(),
                    tfPlazaLocation.getText().trim(),
                    tfAddress.getText().trim(),
                    tfState.getText().trim()
        );

        // Check for duplicate License Number
        if (checkDuplicateToll(newToll)) {
            tfLicenseNumber.setBorder(createTitledBorder(errorColor, "License Number"));
            showDialogBox("License Number already exists.", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the toll entry if no duplicate is found
            tollList.add(newToll);
            clearTollForm(); // Method to clear the input fields
            tfLicenseNumber.setBorder(createTitledBorder(yellowColor, "License Number"));
            showDialogBox("Toll entry added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
    * Checks whether a toll entry with the same License Number already exists in the
    * toll list.
    *
    * @param toll the TollModel object to check for duplicate License Number
    * @return true if a duplicate License Number is found, false otherwise
    */
    private boolean checkDuplicateToll(TollModel toll) {
        return tollList.stream()
                .anyMatch(existingToll
                        -> existingToll.getLicenseNumber() == toll.getLicenseNumber());
}

    /**
    * Creates a custom TitledBorder with a specified colour and title for input fields
    * in the toll management system. This helps visually indicate validation states 
    * or categorize fields (e.g., License Plate, Toll Amount).
    *
    * @param color the colour for the border and title
    * @param title the title text for the border (e.g., "License Plate", "Toll Amount")
    * @return a TitledBorder instance styled with the provided colour and title
    */
    private javax.swing.border.TitledBorder createTitledBorder(Color color, String title) {
        return javax.swing.BorderFactory.createTitledBorder(
                javax.swing.BorderFactory.createLineBorder(color, 2), // 2-pixel line border
                title, // Title for the field
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, // Default title alignment
                javax.swing.border.TitledBorder.DEFAULT_POSITION, // Default position (above the border)
                new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12), // Font styling for the title
                color // Title text color
        );
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // Retrieve data from input fields
        String plazaName = tfPlazaName.getText().trim();
        String state = tfState.getText().trim();
        String vehicleNumber = tfVehicleNumber.getText().trim();
        String address = tfAddress.getText().trim();
        String citizenName = tfCitizenName.getText().trim();
        String plazaLocation = tfPlazaLocation.getText().trim();
        String userName = tfUserName.getText().trim(); // Corrected variable name
    
        // Retrieve and parse integer fields
        String citizenshipNumberStr = tfCitizenshipNumber.getText().trim();
        String licenseNumberStr = tfLicenseNumber.getText().trim();
    
        // Validate the input data
        if (plazaName.isEmpty() || state.isEmpty() || vehicleNumber.isEmpty() || 
            address.isEmpty() || citizenshipNumberStr.isEmpty() || citizenName.isEmpty() || 
            licenseNumberStr.isEmpty() || plazaLocation.isEmpty() || userName.isEmpty()) {
        
            System.out.println("All fields must be filled out.");
            return; // Exit the method if validation fails
        }

        // Parse integer fields
        int citizenshipNumber;
        int licenseNumber;
        try {
            citizenshipNumber = Integer.parseInt(citizenshipNumberStr);
            licenseNumber = Integer.parseInt(licenseNumberStr);
        } catch (NumberFormatException e) {
            System.out.println("Citizenship number and License number must be valid integers.");
            return; // Exit if parsing fails
        }

        // Update the data 
        boolean updateSuccessful = updateData(plazaName, state, vehicleNumber, address, citizenshipNumber, citizenName, licenseNumber, plazaLocation, userName);

        // Provide feedback to the user
        if (updateSuccessful) {
            JOptionPane.showMessageDialog(this, "Data updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
            // Clear all input fields after successful update
            tfAddress.setText("");
            tfCitizenshipNumber.setText("");
            tfCitizenName.setText("");
            tfLicenseNumber.setText("");
            tfPlazaLocation.setText("");
            tfPlazaName.setText("");
            tfState.setText("");
            tfUserName.setText(""); 
            tfVehicleNumber.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Example method to simulate data update
    private boolean updateData(String plazaName, String state, String vehicleNumber, String address, int citizenshipNumber, String citizenName, int licenseNumber, String plazaLocation, String userName) {
        // Return true if successful, false otherwise
        return true; // Placeholder
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Set the text of each text field to an empty string
        tfAddress.setText("");
        tfCitizenshipNumber.setText("");
        tfCitizenName.setText("");
        tfLicenseNumber.setText("");
        tfPlazaLocation.setText("");
        tfPlazaName.setText("");
        tfState.setText("");
        tfVehicleNumber.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       /*
        // Get the selected toll entry or record to delete
    int selectedIndex = tollList.getSelectedIndex(); // Assuming tollList is a JList or similar component

    // Check if an entry is selected
    if (selectedIndex != -1) {
        // Confirm deletion with the user
        int confirmation = javax.swing.JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this entry?", 
            "Confirm Deletion", 
            javax.swing.JOptionPane.YES_NO_OPTION);

        // If the user confirms the deletion
        if (confirmation == javax.swing.JOptionPane.YES_OPTION) {
            // Remove the selected toll entry from the list
            tollListModel.remove(selectedIndex); // Assuming tollListModel is the model for the JList

            // Optionally, update any other components or data structures
            // For example, you might want to refresh a display or update a database

            // Show a success message to the user
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Entry deleted successfully.", 
                "Deletion Successful", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    } else {
        // If no entry is selected, show an error message
        javax.swing.JOptionPane.showMessageDialog(this, 
            "Please select an entry to delete.", 
            "Deletion Error", 
            javax.swing.JOptionPane.ERROR_MESSAGE);
    }*/
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
    * Validates a single input field in the toll management system based on specific
    * criteria and updates its visual state.
    *
    * @param textField the JTextField to validate
    * @param fieldName the name of the field for error display
    * @param errorLbl the JLabel to display error messages
    * @param errorMsg the error message to display for invalid input
    * @param errorColor the colour for error borders and text
    * @param successColor the colour for successful validation borders
    * @param isValidFormat whether the input satisfies the field-specific
    *                      validation criteria
    * @return true if the field passes validation, false otherwise
    */
    private boolean validateField(JTextField textField, String fieldName, JTextField errorLbl, String errorMsg, Color errorColor, Color successColor, boolean isValidFormat) {
        if (ValidationUtil.isNullOrEmpty(textField.getText())) {
            // Highlight the field and show an error message for empty input
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText(fieldName + " cannot be empty!");
            errorLbl.setVisible(true);
            return false;
        } else if (!isValidFormat) {
            // Highlight the field and show a specific error message for invalid input
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
            return false;
        } else {
            // Indicate successful validation
            textField.setBorder(createTitledBorder(successColor, fieldName));
            errorLbl.setVisible(false);
            return true;
        }
    }

    /**
         * Displays a message dialog box with the given message, title, and type.
        *
        * @param message the message to display
        * @param title the title of the dialog box
        * @param messageType the type of message (e.g., information, warning, or
        * error)
        */
        private void showDialogBox(String message, String title, int messageType) {
            JOptionPane.showMessageDialog(this, message, title, messageType);
        }
        
        /**
        * Clears all input fields in the toll form. Resets each field's value to
        * an empty string.
        */
        private void clearTollForm() {
            tfAddress.setText("");
            tfCitizenshipNumber.setText("");
            tfCitizenName.setText("");
            tfLicenseNumber.setText("");
            tfPlazaLocation.setText("");
            tfPlazaName.setText("");
            tfState.setText("");
            tfVehicleNumber.setText("");
        }

    public static void main(String args[]) {
        
       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        TollManagementSystem system = new TollManagementSystem();
        
        //set up cardlayout
        CardLayout cardlayout = new CardLayout();
        system.getContentPane().setLayout(cardlayout);
        
        // Add panels to CardLayout
        system.getContentPane().add(system.pnlLoadingPage, "LoadingPage");
        system.getContentPane().add(system.pnlLoginPage, "LoginPage");
        system.getContentPane().add(system.pnlPages,"Pages");
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                system.setVisible(true);
            }
        });
        try{
            for(int i=0; i<=100; i++){
                Thread.sleep(30);
                system.jProgressBar1.setValue(i);
            }
            // After progress completes
            java.awt.EventQueue.invokeLater(() -> {
            system.pnlLoadingPage.setVisible(false);  // Hide loading page
            system.pnlLoginPage.setVisible(true);     // Show login page
                });
            }catch(Exception e){
            
        } 
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSignIn;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbVehicleCategeory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpDashboard;
    private javax.swing.JPanel jpHomePage;
    private javax.swing.JScrollPane jspTableContents;
    private javax.swing.JTable jtInformation;
    private javax.swing.JTabbedPane jtpPages;
    private javax.swing.JLabel lblBackgroundImage;
    private javax.swing.JLabel lblForgetPassword;
    private javax.swing.JLabel lblHomeImage;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLoadingBar;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblPasswordImage;
    private javax.swing.JLabel lblPhrase;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblTitle3;
    private javax.swing.JLabel lblUserImage;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JPanel pnlContext;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JPanel pnlImage;
    private javax.swing.JPanel pnlLoadingPage;
    private javax.swing.JPanel pnlLoginDetails;
    private javax.swing.JPanel pnlLoginPage;
    private javax.swing.JPanel pnlPages;
    private javax.swing.JPanel pnlTextFields;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JSeparator spPassword;
    private javax.swing.JSeparator spUser;
    private javax.swing.JTextArea taInformation;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfCitizenName;
    private javax.swing.JTextField tfCitizenshipNumber;
    private javax.swing.JTextField tfLicenseNumber;
    private javax.swing.JTextField tfPlazaLocation;
    private javax.swing.JTextField tfPlazaName;
    private javax.swing.JTextField tfState;
    private javax.swing.JTextField tfUserName;
    private javax.swing.JTextField tfVehicleNumber;
    // End of variables declaration//GEN-END:variables

    

}
